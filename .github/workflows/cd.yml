name: deploy credx api

on:
  push:
    branches:
      - main

jobs:
  changes:
    runs-on: ubuntu-latest

    outputs:
      server: ${{ steps.changes.outputs.server }}
      migrations: ${{ steps.changes.outputs.migrations }}

    steps:
      - name: checkout for changes
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: check for changes
        id: changes
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Check if server files changed
          if echo "$CHANGED_FILES" | grep -E (src/|package\.json|wrangler\.|pnpm-lock\.yaml)'; then
            echo "server=true" >> $GITHUB_OUTPUT
          else
            echo "server=false" >> $GITHUB_OUTPUT
          fi

          # Check if migration files changed
          if echo "$CHANGED_FILES" | grep -E (drizzle/|migrations/|.*\.sql)'; then
            echo "migrations=true" >> $GITHUB_OUTPUT
          else
            echo "migrations=false" >> $GITHUB_OUTPUT
          fi
      - name: Debug outputs
        run: |
          echo "Server change detected: ${{ steps.changes.outputs.server }}"
          echo "Migrations change detected: ${{ steps.changes.outputs.migrations }}"

  deploy:
    needs: changes
    if: needs.changes.outputs.server == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: checkout for deploy
        uses: actions/checkout@v4

      - name: setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: install dependencies
        run: bun install

      - name: generate and run migrations
        if: needs.changes.outputs.migrations == 'true'
        run: |
          echo "migration files changed"
          echo "running schema generation ...."
          bun run drizzle:generate
          echo "✅ schema generated successfully"
          echo "migrating to db ....."
          bun run drizzle:push
          echo "✅ schema migrated successfully"
        env:
          TURSO_DATABASE_URL: ${{ secrets.TURSO_DATABASE_URL }}
          TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN }}

      - name: generate wrangler.jsonc
        run: |
          cat > wrangler.jsonc <<EOF
          {
          "name": "untangled-be",
            "account_id": "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}",
            "main": "src/index.ts",
            "compatibility_date": "$(date +%Y-%m-%d)",
            "compatibility_flags": ["nodejs_compat"],
            "vars": {
              "TURSO_DATABASE_URL": "${{ secrets.TURSO_DATABASE_URL }}",
              "TURSO_AUTH_TOKEN": "${{ secrets.TURSO_AUTH_TOKEN }}",
              "FRONTEND_URL": "${{ vars.FRONTEND_URL }}",
              "REDIS_URL": "${{ secrets.REDIS_URL }}",
              "REDIS_TOKEN": "${{ secrets.REDIS_TOKEN }}"
            }
          }
          EOF

      - name: Deploy to Workers
        run: pnpm wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
